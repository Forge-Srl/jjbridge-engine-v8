name: Release JJBridge V8 Engine

on:
  push:
    tags:
      - 'release/**'

jobs:
  build_and_test_android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure GPG Key
        run: |
          export GPG_TTY=$(tty)
          mkdir -p ~/.gnupg/
          echo "$GPG_SIGNING_KEY" > ~/.gnupg/private.asc
          gpg --batch --import ~/.gnupg/private.asc
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_KEY_FORGE_SRL_OPENSOURCE }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-android-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-android-m2
      - name: Cache Android ndk
        uses: actions/cache@v2
        with:
          path: tools/ndk
          key: android-ndk-${{ hashFiles('**/build_Android.sh') }}
          restore-keys: android-ndk
      - name: Build and test
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: mvn -B verify --file pom.xml -P !Common,Android,Linux
      - name: Get jar to release
        uses: actions/upload-artifact@v2
        with:
          name: android
          path: |
            target/jjbridge-engine-v8-*.aar

  build_and_test_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure GPG Key
        run: |
          export GPG_TTY=$(tty)
          mkdir -p ~/.gnupg/
          echo "$GPG_SIGNING_KEY" > ~/.gnupg/private.asc
          gpg --batch --import ~/.gnupg/private.asc
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_KEY_FORGE_SRL_OPENSOURCE }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and test
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: mvn -B verify --file pom.xml -P Common,Linux
      - name: Get jar to release
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: |
            target/jjbridge-engine-v8-*-linux.jar
            target/jjbridge-engine-v8-*-javadoc.jar
            target/jjbridge-engine-v8-*-sources.jar

  build_and_test_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure GPG Key
        run: |
          export GPG_TTY=$(tty)
          mkdir -p ~/.gnupg/
          echo "$GPG_SIGNING_KEY" > ~/.gnupg/private.asc
          gpg --batch --import ~/.gnupg/private.asc
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_KEY_FORGE_SRL_OPENSOURCE }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and test
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: mvn -B verify --file pom.xml -P Common,macOS
      - name: Get jar to release
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: |
            target/jjbridge-engine-v8-*-macos.jar

  build_and_test_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure GPG Key
        run: |
          New-Item -ItemType "directory" -Path "~\.gnupg"
          $outPath = "$(Convert-Path ~)\.gnupg\private.asc"
          "$env:GPG_SIGNING_KEY" | Out-File $outPath
          gpg --batch --import $outPath
        shell: powershell
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_KEY_FORGE_SRL_OPENSOURCE }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and test
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: mvn -B verify --file pom.xml -P Common,Windows
      - name: Get jar to release
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: |
            target/jjbridge-engine-v8-*-windows.jar

  release_current_version:
    runs-on: ubuntu-latest
    needs: [build_and_test_android, build_and_test_linux, build_and_test_macos, build_and_test_windows]
    steps:
      - uses: actions/checkout@v2
      - name: Configure GPG Key
        run: |
          export GPG_TTY=$(tty)
          mkdir -p ~/.gnupg/
          echo "$GPG_SIGNING_KEY" > ~/.gnupg/private.asc
          gpg --batch --import ~/.gnupg/private.asc
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_KEY_FORGE_SRL_OPENSOURCE }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - uses: actions/download-artifact@v2
        with:
          name: android
          path: target
      - uses: actions/download-artifact@v2
        with:
          name: linux
          path: target
      - uses: actions/download-artifact@v2
        with:
          name: macos
          path: target
      - uses: actions/download-artifact@v2
        with:
          name: windows
          path: target
      - name: Release on Github
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mvn -B deploy --file pom.xml -P Common,!Linux -Drelease-repo=github -Dexec.skip=true -Dscript.executor=echo -Dmaven.main.skip=true -Dmaven.test.skip=true -Dassembly.skipAssembly=true -Dcheckstyle.skip=true -Dspotbugs.skip=true

      - name: Set up Java 1.8 for publishing to Maven Central
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Release on Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE_FORGE_SRL_OPENSOURCE }}
        run: |
          mvn -B deploy --file pom.xml -P Common,!Linux -Drelease-repo=maven-central -Dexec.skip=true -Dscript.executor=echo -Dmaven.main.skip=true -Dmaven.test.skip=true -Dassembly.skipAssembly=true -Dcheckstyle.skip=true -Dspotbugs.skip=true
